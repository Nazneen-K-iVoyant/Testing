Manual Testing

Am individual will open the website, ineract with the website and ensures everything works as intended.

If a new feature is released, you repeat the same steps.

You may have to test not only the new feature but also the existing features

Drawbacks:
- Time consuming
- Complex repetitive tasks has a risk of human error
- You may not get a chance to test all the features you should.



Automated Testing

Automated tests are programs that automate the task of testing your software.
Write code to test the software code.
Additional efforts required when you develop a feature.

Advantages:
- Not time consuming.
- Relaible, consistent and not error prone.
- Easy to identify and fix features that break tests.
- Gives confidence when shipping software.


Jest 
- Jest is a Javascript testingg framework
- Jest is a test runner that finds tests, runs the testss, determine whether the tests passed or failed and reports it back in a human readable manner.

RTL - React testing library
- Javascript testing utiility that provides virtual DOM for testing React components.
- React testing library provides a virtual DOM which we can use to interact with and verify the behaviour of a react component.
- Testing library is infact a family of packages which helps test UI components.
- The core library is called DOM testing library and RTL is simply a wrapper around this core library to test React applications in an easier way.


Types of tests:
- Unit tests
- Integration tests
- E2E tests

queryBy
- Returns the matching node for a query, and return null if no elements match
- Useful for asserting an element
- Throws an error if more than one match is found

queryAllBy
- Returns an array of matching nodes for a query, and returns an empty array if no elements match

findBy
- Returns a Promise which resolves when an element is found which matches the given query
- The promise is rejected if no element is found or if more than one element is found after a default timeout of 1000s

findAllBy
- Returns a promise which resolves to an array of elements when any elements are found which match the given query
- The promise is rejected if no elements are found after a default timeout of 1000ms


****************************************************************
User Interactions:

A click using a mouse or a keypress using a keyboard, software has to respond to such Interactions
Tests should ensure the Interactions are handled as expected


user-event:
A companion library for testing library that simulates users interactions by dispatching the events that would happen if the interaction took place in a browser.
It is the recommeneded way to test user interactions with RTL

*******************************************
All the apis from user interactions are asynchronous, and we therefore use async and await
******************************************


******************************************
All user event apis are asynchronous
********************


Convenience APIs:
- click()
- dbClick()
- tripleClick()
- hover()
- unhover()


Pointer Interaction:

Pointer accepts an object as argument and we specify the keys property.
You can pass string if keys is the only argument to the function.

Pointer APIs
pointer({keys:'[MouseLeft]})
pointer({keys:'[MouseLeft][Mouserright]'})
pointer('[MouseLeft>]')
pointer('[/MouseLeft]')

***************************************************

keyboard interactions

Utility API:
type()
- clear()
- selectOptions()
- upload()

Convenience API:
tab()

Clipboard APIs
- copy()
- cut()
- paste()

keyboard APIs:
- the keyboard api allows to simulate interactions with a keyboard, it accepts a string describing the key actions
- If you want to hold a key, 
  keyboard('{Shift>}A{/Shift}) // translates to: Shift(down), A, Shift(up)


***********************************************************************************************
Testing React Hooks:
For testing react hooks we do not rely on render and screen from testing library instead we reply on renderHook, which returns a result which in turn returns a current  property that has all the return values of the custom hook, 
  - And if we want to invoke the hook with props you can pass in an option object to render hook with a key call initialProps
**************************************************************************************************

Real APIs are primarily used only for end-to-end tests and not for unit or functional tests,
  - For one we dont have to ensure the server is up and running to test whether the component renders as intended
  - Since these tests are run quite often it is not feasible to include real apis which may even charge you  based on the number of requests
For this what we have to do is, mock the http requests in our test
**************************************************
Static Analysis testing
Process of verifying that your code meets certain expectations without actually running it
Advantages:
  - Ensure consistent style and formatting
  - Check for common mistaked and possible bugs
  - Limit the complexity of code 
  - Verify type consistency

- All types of tests run the code and then compare the outcome against known  expected outputs to see if everything works OK
- Static testing analyses aspects such as readabily, consistency, error handling, type checking and alignment with best practices.
- Testing checks if your code works or not, whereas static analysis checks if it is written well or not.

Static analysis testing tools
- Typescript 
- ESlint
- Prettier
- Husky
- lint-staged